package org.example.phonebook;

import jakarta.mail.*;
import jakarta.mail.internet.InternetAddress;
import jakarta.mail.internet.MimeMessage;

import org.apache.logging.log4j.Logger;

import org.example.contact.Contact;
import org.example.exception.ElementAlreadyExistsException;
import org.example.exception.InvalidArgumentsProvidedException;
import org.example.repository.ContactRepository;

import java.io.*;
import java.util.Properties;
import java.util.regex.Pattern;

/*

W ramach zadania stwórz mini projekt, który będzie umożliwiał zarządzanie książką telefoniczną zapisywaną w pliku tekstowym.

W aplikacji będą zaimplementowane następujące funkcjonalności:

dodawanie nowych rekordów,
wyszukiwania po części nazwy,
wyszukiwania po części numeru telefonu,
usuwanie rekordów.
Program powinien zapisywać stan przy zamykaniu aplikacji.

Ograniczenia:

nazwy kontaktów w programie powinny być unikalne,
nazwa ani numer telefonu nie mogą być nullami ani pustymi Stringami ("").

Co do testów, powinny zawierać takie metody jak:

Testowania dodawania nowego obiektu

Testowania usunięcia obiektu

Sprawdzenie czy podany numer telefonu jest dobry: czyli czy zgadza się ilość znaków (+48 XXX XXX XXX),
 zakładamy że są to numery tylko z polski
 */
public class PhoneBook {
    private ContactRepository contactRepository;
    private Logger logger;

    public PhoneBook(ContactRepository contactRepository, Logger logger) {
        this.contactRepository = contactRepository;
        this.logger = logger;
    }

    private boolean validateEmail(String email) {
        Pattern pattern = Pattern.compile("^[A-z0-9._\\-]*@[A-z]*\\.[A-z]*$");
        return pattern.matcher(email).matches();
    }

    private String generateReport() {
        StringBuilder builder = new StringBuilder();
        var contacts = contactRepository.getContacts();

        builder.append("========================\n");
        builder.append("|        CONTACTS      |\n");
        builder.append("========================\n");

        for (var c : contacts) {
            String str = "| " + c.getName() + "\t" + c.getNumber() + " |\n";
            builder.append(str);
        }

        builder.append("========================\n");
        builder.append("|          END         |\n");
        builder.append("========================\n");

        return builder.toString();
    }
    public void sendReport(String email) throws InvalidArgumentsProvidedException, MessagingException {
        boolean emailIsValid = validateEmail(email);
        if (emailIsValid) {
//            email = "hajoki4933@migonom.com"; // debug purposes

            String userName = "c2ef9b2375192f";
            String password = "0459524773a6e2";

            String host = "smtp.mailtrap.io";
            Properties prop = System.getProperties();

            prop.put("mail.smtp.auth", "true");
            prop.put("mail.smtp.starttls.enable", "true");
            prop.put("mail.smtp.host", host);
            prop.put("mail.smtp.port", "2525");


            Session session = Session.getDefaultInstance(prop, new Authenticator() {
                @Override
                protected PasswordAuthentication getPasswordAuthentication() {
                    return new PasswordAuthentication(userName, password);
                }
            });

            MimeMessage message = new MimeMessage(session);

            message.setFrom(new InternetAddress(userName));
            message.addRecipient(Message.RecipientType.TO, new InternetAddress(email));

            message.setSubject("Report generated by: [ " + host + " ]");

            String msgText = generateReport();
            message.setText(msgText);

            Transport.send(message);
        }
        else {
            throw new InvalidArgumentsProvidedException("Invalid email");
        }
    }
    public void writeDataToFile(String filename) {
        try (
                BufferedWriter bw = new BufferedWriter(new FileWriter(filename, false))
        ) {
            var contacts = contactRepository.getContacts();

            for (var c : contacts) {
                bw.write(c.toString() + "\n");
            }
        }
        catch (Exception e) {
            logger.error(e.getMessage());
        }
    }

    public void loadDataFromFile(String filename) {
        try (
                BufferedReader br = new BufferedReader(new FileReader(filename))
        ) {
            while (true) {
                var line = br.readLine();
                if (line == null || line.isEmpty()) {
                    break;
                }

                var data = line.split(",");
                Contact contact = new Contact(data[0], data[1]);
                contactRepository.addContact(contact);
            }
        }
        catch (Exception e) {
            logger.error(e.getMessage());
        }
    }

    public Contact addContact(Contact contact) throws ElementAlreadyExistsException {
        return contactRepository.addContact(contact);
    }

    public Contact removeContact(Contact contact) {
        return contactRepository.removeContact(contact);
    }

    public Contact removeContact(String name) {
        return contactRepository.removeContact(name);
    }

    public Contact findByName(String name) {
        return contactRepository.findByName(name);
    }

    public Contact findByNumber(String number) {
        return contactRepository.findByNumber(number);
    }
}
